{"version":3,"sources":["../node_modules/reactstrap/es/ButtonGroup.js","components/reactstrap/buttons/ButtonsSourceCode.js","components/reactstrap/buttons/ButtonsFilled.js","components/reactstrap/buttons/ButtonsOutline.js","components/reactstrap/buttons/ButtonsFlat.js","components/reactstrap/buttons/ButtonsGradient.js","components/reactstrap/buttons/ButtonsRelief.js","components/reactstrap/buttons/ButtonsSquare.js","components/reactstrap/buttons/ButtonsRound.js","components/reactstrap/buttons/ButtonsTextColor.js","components/reactstrap/buttons/ButtonsIcon.js","components/reactstrap/buttons/ButtonsIconOnly.js","components/reactstrap/buttons/ButtonGroup.js","components/reactstrap/buttons/ButtonSizes.js","components/reactstrap/buttons/ButtonBlock.js","components/reactstrap/buttons/ButtonTags.js","components/reactstrap/buttons/ButtonGroupVertical.js","components/reactstrap/buttons/Buttons.js","../node_modules/reactstrap/es/TabContext.js","../node_modules/prismjs/components/prism-jsx.min.js","../node_modules/reactstrap/es/Nav.js","../node_modules/reactstrap/es/TabContent.js","../node_modules/reactstrap/es/TabPane.js"],"names":["_excluded","propTypes","tag","tagPropType","PropTypes","string","className","cssModule","object","role","size","vertical","bool","ButtonGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","filledButtons","outlineButtons","flatButtons","gradientButtons","reliefButtons","squareButtons","roundButtons","textColorButtons","iconButtons","iconOnlyButtons","buttonGroup","buttonSizes","buttonBlock","buttonTags","buttonGroupVertical","FilledButtons","state","activeTab","toggleTab","tab","setState","Fragment","Card","CardHeader","CardTitle","Nav","tabs","NavItem","NavLink","classnames","active","this","onClick","CardBody","TabContent","TabPane","tabId","Button","Ripple","color","Component","OutlineButtons","outline","FaltButtons","GradientButtons","ReliefButtons","SquareButtons","RoundButtons","TextColorButtons","ButtonsIcon","disabled","ButtonsIconOnly","ButtonGroups","Row","Col","md","sm","ButtonSizes","ButtonBlock","lg","block","ButtonTags","href","target","rel","type","value","ButtonGroupsVertical","Buttons","Prism","highlightAll","BreadCrumb","breadCrumbTitle","breadCrumbParent","breadCrumbActive","ButtonGroupVertical","TabContext","createContext","i","t","util","clone","languages","javascript","e","n","replace","RegExp","source","jsx","extend","pattern","inside","comment","insertBefore","spread","script","alias","rest","o","content","map","join","hooks","add","language","r","length","a","s","tagName","pop","push","openedBraces","g","splice","Token","tokens","pills","oneOfType","horizontal","justified","fill","navbar","card","getVerticalClass","any","_Component","_this","call","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","prototype","render","_this$props","omit","Object","keys","Provider","activeTabId","getClasses","Consumer","_ref"],"mappings":"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","file":"static/js/78.432490ad.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"size\", \"vertical\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  'aria-label': PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  role: PropTypes.string,\n  size: PropTypes.string,\n  vertical: PropTypes.bool\n};\nvar defaultProps = {\n  tag: 'div',\n  role: 'group'\n};\n\nvar ButtonGroup = function ButtonGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      size = props.size,\n      vertical = props.vertical,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, size ? 'btn-group-' + size : false, vertical ? 'btn-group-vertical' : 'btn-group'), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nButtonGroup.propTypes = propTypes;\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","import React from \"react\"\n\nexport const filledButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass FilledButtons extends React.Component {\n  render() {\n    return(\n        <Button.Ripple color=\"primary\">Primary</Button.Ripple>\n\n        <Button.Ripple color=\"success\">Success</Button.Ripple>\n\n        <Button.Ripple color=\"info\">Info</Button.Ripple>\n\n        <Button.Ripple color=\"warning\">Warning</Button.Ripple>\n\n        <Button.Ripple color=\"danger\">Danger</Button.Ripple>\n\n        <Button.Ripple color=\"light\">Light</Button.Ripple>\n\n        <Button.Ripple color=\"dark\">Dark</Button.Ripple>\n    )\n  }\n}\nexport default FilledButtons\n`}\n    </code>\n  </pre>\n)\n\nexport const outlineButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\n  import React from \"react\"\n  import {Button} from \"reactstrap\"\n\n  class OutlineButtons extends React.Component {\n    render() {\n      return(\n          <Button.Ripple outline color=\"primary\">Primary</Button.Ripple>\n\n          <Button.Ripple outline color=\"success\">Success</Button.Ripple>\n\n          <Button.Ripple outline color=\"info\">Info</Button.Ripple>\n\n          <Button.Ripple outline color=\"warning\">Warning</Button.Ripple>\n\n          <Button.Ripple outline color=\"danger\">Danger</Button.Ripple>\n\n          <Button.Ripple outline color=\"light\">Light</Button.Ripple>\n\n          <Button.Ripple outline color=\"dark\">Dark</Button.Ripple>\n      )\n    }\n  }\n  export default OutlineButtons\n  `}\n    </code>\n  </pre>\n)\n\nexport const flatButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass FlatButtons extends React.Component {\n    render() {\n    return(\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-primary\">Primary</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-success\">Success</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-info\">Info</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-warning\">Warning</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-danger\">Danger</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-light\">Light</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-dark\">Dark</Button.Ripple>\n    )\n    }\n}\nexport default FlatButtons\n    `}\n    </code>\n  </pre>\n)\n\nexport const gradientButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass GradientButtons extends React.Component {\nrender() {\n    return(\n        <Button.Ripple className=\"mr-1 mb-1 bg-gradient-primary\" color=\"none\">Primary</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1 bg-gradient-success\" color=\"none\">Success</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1 bg-gradient-info\" color=\"none\">Info</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1 bg-gradient-warning\" color=\"none\">Warning</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1 bg-gradient-danger\" color=\"none\">Danger</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1 bg-gradient-dark\" color=\"none\">Dark</Button.Ripple>\n    )\n}\n}\nexport default GradientButtons\n      `}\n    </code>\n  </pre>\n)\n\nexport const reliefButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass ReliefButtons extends React.Component {\n    render() {\n    return(\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"relief-primary\">Primary</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"relief-success\">Success</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"relief-info\">Info</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"relief-warning\">Warning</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"relief-danger\">Danger</Button.Ripple>\n\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"relief-dark\">Dark</Button.Ripple>\n    )\n    }\n}\nexport default ReliefButtons\n        `}\n    </code>\n  </pre>\n)\n\nexport const squareButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass SqaureButtons extends React.Component {\n    render() {\n    return(\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"primary\">\n      Primary\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"success\">\n      Success\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"info\">\n      Info\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"warning\">\n      Warning\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"danger\">\n      Danger\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"light\">\n      Light\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 square\" outline color=\"dark\">\n      Dark\n    </Button.Ripple>\n    )\n    }\n}\nexport default SqaureButtons\n          `}\n    </code>\n  </pre>\n)\n\nexport const roundButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass RoundButtons extends React.Component {\n    render() {\n    return(\n      <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"primary\">\n      Primary\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"success\">\n      Success\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"info\">\n      Info\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"warning\">\n      Warning\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"danger\">\n      Danger\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"light\">\n      Light\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 round\" outline color=\"dark\">\n      Dark\n    </Button.Ripple>\n    )\n    }\n}\nexport default RoundButtons\n            `}\n    </code>\n  </pre>\n)\n\nexport const textColorButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass TextColorButtons extends React.Component {\n    render() {\n    return(\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-primary\" color=\"flat-primary\">\n      Primary\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-success\" color=\"flat-success\">\n      Success\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-info\" color=\"flat-info\">\n      Info\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-warning\" color=\"flat-warning\">\n      Warning\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-danger\" color=\"flat-danger\">\n      Danger\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-light\" color=\"flat-light\">\n      Light\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1  border-primary text-dark\" color=\"flat-dark\">\n      Dark\n    </Button.Ripple>\n    )\n    }\n}\nexport default TextColorButtons\n              `}\n    </code>\n  </pre>\n)\n\nexport const iconButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass IconButtons extends React.Component {\n  render() {\n  return(\n    <Button.Ripple className=\"mr-1 mb-1\" outline color=\"primary\">\n      <Home size={14} />\n      Home\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1\" color=\"warning\">\n      <Star size={14} />\n       Star\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-success\">\n      <Check size={14} />\n      Done\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1\" outline color=\"primary\" disabled>\n      Home size={14} />\n      Home\n    </Button.Ripple>\n  )\n  }\n}\nexport default IconButtons\n              `}\n    </code>\n  </pre>\n)\n\nexport const iconOnlyButtons = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\nimport { Search, Inbox, Camera } from \"react-feather\"\n\nclass IconOnlyButtons extends React.Component {\n  render() {\n  return(\n    <Button.Ripple className=\"mr-1 mb-1\" outline color=\"primary\">\n      <Search size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1\" color=\"warning\">\n      <Inbox size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-success\">\n      <Camera size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1\" outline color=\"primary\" disabled>\n      <Search size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple\n      className=\"mr-1 mb-1 rounded-circle\"\n      outline\n      color=\"primary\"\n    >\n      <Search size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple className=\"mr-1 mb-1 rounded-circle\" color=\"warning\">\n      <Inbox size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple\n      className=\"mr-1 mb-1 rounded-circle\"\n      color=\"flat-success\"\n    >\n      <Camera size={14} />\n    </Button.Ripple>\n\n    <Button.Ripple\n      className=\"mr-1 mb-1 rounded-circle\"\n      outline\n      color=\"primary\"\n      disabled\n    >\n      <Search size={14} />\n    </Button.Ripple>\n  )\n  }\n}\nexport default IconOnlyButtons\n              `}\n    </code>\n  </pre>\n)\n\nexport const buttonGroup = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button, ButtonGroup, Row, Col} from \"reactstrap\"\nimport { Facebook, Instagram, Twitter } from \"react-feather\"\n\nclass ButtonGroups extends React.Component {\n  render() {\n  return(\n    <Row>\n    <Col md={6} sm={12}>\n      <Button.RippleGroup>\n        <Button.Ripple color=\"primary\">Left</Button.Ripple>{\" \"}\n        <Button.Ripple color=\"danger\">Middle</Button.Ripple>{\" \"}\n        <Button.Ripple color=\"info\">Right</Button.Ripple>{\" \"}\n      </ButtonGroup>\n    </Col>\n\n    <Col md={6} sm={12}>\n      <Button.RippleGroup>\n        <Button.Ripple outline color=\"primary\">\n          <Facebook size={15} />\n        </Button.Ripple>{\" \"}\n        <Button.Ripple outline color=\"danger\">\n          <Twitter size={15} />\n        </Button.Ripple>{\" \"}\n        <Button.Ripple outline color=\"info\">\n          <Instagram size={15} />\n        </Button.Ripple>{\" \"}\n      </ButtonGroup>\n    </Col>\n  </Row>\n  )\n  }\n}\nexport default ButtonGroups\n              `}\n    </code>\n  </pre>\n)\n\nexport const buttonSizes = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button, Row, Col} from \"reactstrap\"\n\nclass ButtonSizes extends React.Component {\n  render() {\n  return(\n    <Row>\n      <Col md={6} sm={12}>\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"primary\" size=\"lg\">\n          Large\n        </Button.Ripple>{\" \"}\n        <Button.Ripple className=\"mr-1 mb-1\" color=\"danger\">\n          Default\n        </Button.Ripple>{\" \"}\n        <Button.Ripple className=\"mb-1\" color=\"info\" size=\"sm\">\n          Small\n        </Button.Ripple>{\" \"}\n      </Col>\n      <Col md={6} sm={12}>\n        <Button.Ripple\n          outline\n          className=\"mr-1 mb-1\"\n          color=\"primary\"\n          size=\"lg\"\n        >\n          Large\n        </Button.Ripple>{\" \"}\n        <Button.Ripple outline className=\"mr-1 mb-1\" color=\"danger\">\n          Default\n        </Button.Ripple>{\" \"}\n        <Button.Ripple outline className=\"mb-1\" color=\"info\" size=\"sm\">\n          Small\n        </Button.Ripple>\n      </Col>\n  </Row>\n  )\n  }\n}\nexport default ButtonSizes\n              `}\n    </code>\n  </pre>\n)\n\nexport const buttonBlock = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button, Row, Col} from \"reactstrap\"\n\nclass ButtonBlock extends React.Component {\n  render() {\n  return(\n    <Row>\n      <Col lg={6} md={12}>\n        <Button.Ripple className=\"mr-1 mb-1 btn-block\" color=\"primary\" size=\"lg\">\n          Block Level Button\n        </Button.Ripple>\n      </Col>\n      <Col lg={6} md={12}>\n        <Button.Ripple outline className=\"mr-1 mb-1 btn-block\" color=\"primary\" size=\"lg\">\n          Block Level Button\n        </Button.Ripple>\n      </Col>\n    </Row>\n  )\n  }\n}\nexport default ButtonBlock\n              `}\n    </code>\n  </pre>\n)\n\nexport const buttonTags = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button} from \"reactstrap\"\n\nclass ButtonTags extends React.Component {\n  render() {\n  return(\n    <a\n      className=\"mr-1 mb-1 btn btn-primary\"\n      color=\"primary\"\n      href=\"https://pixinvent.com/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Link\n    </a>\n    <Button.Ripple className=\"mr-1 mb-1\" color=\"primary\" tag=\"button\">\n      Button\n    </Button.Ripple>\n    <input\n      className=\"mr-1 mb-1 btn btn-primary\"\n      type=\"button\"\n      value=\"Input\"\n    />\n    <input\n      className=\"mr-1 mb-1 btn btn-primary\"\n      type=\"submit\"\n      value=\"Submit\"\n    />\n  )\n  }\n}\nexport default ButtonTags\n              `}\n    </code>\n  </pre>\n)\n\nexport const buttonGroupVertical = (\n  <pre>\n    <code className=\"language-jsx\">\n      {`\nimport React from \"react\"\nimport {Button, ButtonGroup, Row, Col} from \"reactstrap\"\n\nclass ButtonGroupsVertical extends React.Component {\n  render() {\n  return(\n    <Row>\n      <Col md={4} sm={12}>\n        <Button.RippleGroup vertical className=\"mb-1\">\n          <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n        </ButtonGroup>\n      </Col>\n      <Col md={4} sm={12}>\n        <Button.RippleGroup vertical className=\"mb-1\">\n          <Button.Ripple color=\"primary\">Primary</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"success\">Success</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"info\">Info</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"warning\">Warning</Button.Ripple>{\" \"}\n          <Button.Ripple color=\"danger\">Danger</Button.Ripple>{\" \"}\n        </ButtonGroup>\n      </Col>\n      <Col md={4} sm={12}>\n        <Button.RippleGroup vertical className=\"mb-1\">\n          <Button.Ripple outline color=\"primary\">\n            Button\n          </Button.Ripple>{\" \"}\n          <Button.Ripple outline color=\"success\">\n            Button\n          </Button.Ripple>{\" \"}\n          <Button.Ripple outline color=\"info\">\n            Button\n          </Button.Ripple>{\" \"}\n          <Button.Ripple outline color=\"warning\">\n            Button\n          </Button.Ripple>{\" \"}\n          <Button.Ripple outline color=\"danger\">\n            Button\n          </Button.Ripple>{\" \"}\n        </ButtonGroup>\n      </Col>\n  </Row>\n  )\n  }\n}\nexport default ButtonGroupsVertical\n              `}\n    </code>\n  </pre>\n)\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { filledButtons } from \"./ButtonsSourceCode\"\n\nclass FilledButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Filled</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Reactstrap includes six predefined button styles, each serving its\n              own semantic purpose.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"primary\">Primary</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"success\">Success</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple color=\"info\">Info</Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"warning\">Warning</Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"danger\">Danger</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"light\">Light</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"dark\">Dark</Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {filledButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default FilledButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { outlineButtons } from \"./ButtonsSourceCode\"\n\nclass OutlineButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Outline</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use attribute outline with button tag to create an outline button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"primary\" outline>\n                    Primary\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"success\" outline>\n                    Success\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple color=\"info\" outline>\n                    Info\n                  </Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"warning\" outline>\n                    Warning\n                  </Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"danger\" outline>\n                    Danger\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"light\" outline>\n                    Light\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"dark\" outline>\n                    Dark\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {outlineButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default OutlineButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { flatButtons } from \"./ButtonsSourceCode\"\n\nclass FaltButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Flat</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>color=\"flat-colorName\"</code> to create a flat button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-primary\">Primary</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-success\">Success</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-info\">Info</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-warning\">Warning</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-danger\">Danger</Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-light\">Light</Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple color=\"flat-dark\">Dark</Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {flatButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default FaltButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { gradientButtons } from \"./ButtonsSourceCode\"\n\nclass GradientButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Gradient</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>.bg-gradient-colorName</code> to create a gradient\n              button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"bg-gradient-primary\" color=\"none\">\n                    Primary\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"bg-gradient-success\" color=\"none\">\n                    Success\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"bg-gradient-info\" color=\"none\">\n                    Info\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"bg-gradient-warning\" color=\"none\">\n                    Warning\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"bg-gradient-danger\" color=\"none\">\n                    Danger\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"bg-gradient-dark\" color=\"none\">\n                    Dark\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {gradientButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default GradientButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { reliefButtons } from \"./ButtonsSourceCode\"\n\nclass ReliefButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Relief</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>color=\"relief-colorName\"</code> to create a relief\n              button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Button className=\"mr-1 mb-1\" color=\"relief-primary\">\n                  Primary\n                </Button>{\" \"}\n                <Button className=\"mr-1 mb-1\" color=\"relief-success\">\n                  Success\n                </Button>{\" \"}\n                <Button className=\"mr-1 mb-1\" color=\"relief-info\">\n                  Info\n                </Button>{\" \"}\n                <Button className=\"mr-1 mb-1\" color=\"relief-warning\">\n                  Warning\n                </Button>{\" \"}\n                <Button className=\"mr-1 mb-1\" color=\"relief-danger\">\n                  Danger\n                </Button>{\" \"}\n                <Button className=\"mr-1 mb-1\" color=\"relief-light\">\n                  Light\n                </Button>{\" \"}\n                <Button className=\"mr-1 mb-1\" color=\"relief-dark\">\n                  Dark\n                </Button>{\" \"}\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {reliefButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ReliefButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { squareButtons } from \"./ButtonsSourceCode\"\n\nclass SquareButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Square</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>.square</code> with attribute outline to create a square\n              button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"square\" color=\"primary\" outline>\n                    Primary\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"square\" color=\"success\" outline>\n                    Success\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple className=\"square\" color=\"info\" outline>\n                    Info\n                  </Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"square\" color=\"warning\" outline>\n                    Warning\n                  </Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"square\" color=\"danger\" outline>\n                    Danger\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"square\" color=\"light\" outline>\n                    Light\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"square\" color=\"dark\" outline>\n                    Dark\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {squareButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default SquareButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { roundButtons } from \"./ButtonsSourceCode\"\n\nclass RoundButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Round</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>.round</code> with attribute outline to create a round\n              button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"round\" color=\"primary\" outline>\n                    Primary\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"round\" color=\"success\" outline>\n                    Success\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple className=\"round\" color=\"info\" outline>\n                    Info\n                  </Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"round\" color=\"warning\" outline>\n                    Warning\n                  </Button.Ripple>{\" \"}\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"round\" color=\"danger\" outline>\n                    Danger\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"round\" color=\"light\" outline>\n                    Light\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple className=\"round\" color=\"dark\" outline>\n                    Dark\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {roundButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default RoundButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { textColorButtons } from \"./ButtonsSourceCode\"\n\nclass TextColorButtons extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Text Color</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              You can change the font color of buttons, using{\" \"}\n              <code>.text-colorName</code>.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-primary\"\n                    color=\"flat-primary\"\n                  >\n                    Primary\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-success\"\n                    color=\"flat-success\"\n                  >\n                    Success\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-info\"\n                    color=\"flat-info\"\n                  >\n                    Info\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-warning\"\n                    color=\"flat-warning\"\n                  >\n                    Warning\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-danger\"\n                    color=\"flat-danger\"\n                  >\n                    Danger\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-light\"\n                    color=\"flat-light\"\n                  >\n                    Light\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  <Button.Ripple\n                    className=\"border-primary text-dark\"\n                    color=\"flat-dark\"\n                  >\n                    Dark\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {textColorButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default TextColorButtons\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code, Home, Star, Check } from \"react-feather\"\nimport { iconButtons } from \"./ButtonsSourceCode\"\n\nclass ButtonsIcon extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Icon</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Button.Ripple className=\"mr-1 mb-1\" outline color=\"primary\">\n                  <Home size={14} />\n                  <span className=\"align-middle ml-25\">Home</span>\n                </Button.Ripple>\n                <Button.Ripple className=\"mr-1 mb-1\" color=\"warning\">\n                  <Star size={14} />\n                  <span className=\"align-middle ml-25\">Star</span>\n                </Button.Ripple>\n                <Button.Ripple className=\"mr-1 mb-1\" color=\"flat-success\">\n                  <Check size={14} />\n                  <span className=\"align-middle ml-25\">Done</span>\n                </Button.Ripple>\n                <Button.Ripple\n                  className=\"mr-1 mb-1\"\n                  outline\n                  color=\"primary\"\n                  disabled\n                >\n                  <Home size={14} />\n                  <span className=\"align-middle ml-25\">Home</span>\n                </Button.Ripple>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {iconButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonsIcon\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code, Search, Inbox, Camera } from \"react-feather\"\nimport { iconOnlyButtons } from \"./ButtonsSourceCode\"\n\nclass ButtonsIconOnly extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Icon Only</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              You can use <code>.btn-icon</code>. you can create a rounded\n              button by using <code>.rounded-circle</code> with\n              <code>.btn-icon</code>. You can only use <code>.btn-icon</code>\n              when you only want icon in your button\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple className=\"btn-icon\" outline color=\"primary\">\n                    <Search size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple className=\"btn-icon\" color=\"warning\">\n                    <Inbox size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple className=\"btn-icon\" color=\"flat-success\">\n                    <Camera size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple\n                    className=\"btn-icon\"\n                    outline\n                    color=\"primary\"\n                    disabled\n                  >\n                    <Search size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple\n                    className=\"btn-icon rounded-circle\"\n                    outline\n                    color=\"primary\"\n                  >\n                    <Search size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple\n                    className=\"btn-icon rounded-circle\"\n                    color=\"warning\"\n                  >\n                    <Inbox size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple\n                    className=\"btn-icon rounded-circle\"\n                    color=\"flat-success\"\n                  >\n                    <Camera size={16} />\n                  </Button.Ripple>\n                </div>\n                <div className=\"d-inline-block mr-1 mb-1\">\n                  {\" \"}\n                  <Button.Ripple\n                    className=\"btn-icon rounded-circle\"\n                    outline\n                    color=\"primary\"\n                    disabled\n                  >\n                    <Search size={16} />\n                  </Button.Ripple>\n                </div>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {iconOnlyButtons}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonsIconOnly\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  ButtonGroup,\n  Row,\n  Col\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code, Facebook, Twitter, Instagram } from \"react-feather\"\nimport { buttonGroup } from \"./ButtonsSourceCode\"\n\nclass ButtonGroups extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Button Group</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Group a series of buttons together on a single line with the\n              button group.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Row>\n                  <Col md={6} sm={12}>\n                    <ButtonGroup className=\"mb-1\">\n                      <Button.Ripple color=\"primary\">Left</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"danger\">Middle</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"info\">Right</Button.Ripple>{\" \"}\n                    </ButtonGroup>\n                  </Col>\n                  <Col md={6} sm={12}>\n                    <ButtonGroup className=\"mb-1\">\n                      <Button.Ripple outline color=\"primary\">\n                        <Facebook size={15} />\n                      </Button.Ripple>{\" \"}\n                      <Button.Ripple outline color=\"danger\">\n                        <Twitter size={15} />\n                      </Button.Ripple>{\" \"}\n                      <Button.Ripple outline color=\"info\">\n                        <Instagram size={15} />\n                      </Button.Ripple>{\" \"}\n                    </ButtonGroup>\n                  </Col>\n                </Row>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {buttonGroup}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonGroups\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  Col\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { buttonSizes } from \"./ButtonsSourceCode\"\n\nclass ButtonSizes extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Sizes</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>Size</code> attribute to chnage size of a button.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Row>\n                  <Col md={6} sm={12}>\n                    <div className=\"d-inline-block mr-1 mb-1\">\n                      <Button.Ripple color=\"primary\" size=\"lg\">\n                        Large\n                      </Button.Ripple>\n                    </div>\n                    <div className=\"d-inline-block mr-1 mb-1\">\n                      <Button.Ripple color=\"primary\">Default</Button.Ripple>\n                    </div>\n                    <div className=\"d-inline-block mb-1\">\n                      <Button.Ripple color=\"primary\" size=\"sm\">\n                        Small\n                      </Button.Ripple>\n                    </div>\n                  </Col>\n                  <Col md={6} sm={12}>\n                    <div className=\"d-inline-block mr-1 mb-1\">\n                      <Button.Ripple\n                        outline\n                        className=\"mr-1 mb-1\"\n                        color=\"primary\"\n                        size=\"lg\"\n                      >\n                        Large\n                      </Button.Ripple>\n                    </div>\n                    <div className=\"d-inline-block mr-1 mb-1\">\n                      <Button.Ripple outline color=\"primary\">\n                        Default\n                      </Button.Ripple>\n                    </div>\n                    <div className=\"d-inline-block mb-1\">\n                      <Button.Ripple outline color=\"primary\" size=\"sm\">\n                        Small\n                      </Button.Ripple>\n                    </div>\n                  </Col>\n                </Row>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {buttonSizes}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonSizes\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  Col\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { buttonBlock } from \"./ButtonsSourceCode\"\n\nclass ButtonBlock extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Block Level Buttons</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Create block level buttons—those that span the full width of a\n              parent—by adding <code>.btn-block</code>.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Row>\n                  <Col lg={6} md={12}>\n                    <Button.Ripple\n                      block\n                      className=\"btn-block\"\n                      color=\"primary\"\n                      size=\"lg\"\n                    >\n                      Block Level Button\n                    </Button.Ripple>\n                  </Col>\n                  <Col lg={6} md={12}>\n                    <Button.Ripple\n                      block\n                      outline\n                      className=\"btn-block\"\n                      color=\"primary\"\n                      size=\"lg\"\n                    >\n                      Block Level Button\n                    </Button.Ripple>\n                  </Col>\n                </Row>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {buttonBlock}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonBlock\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { buttonTags } from \"./ButtonsSourceCode\"\n\nclass ButtonTags extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Button tags</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              You can change element tag by using{\" \"}\n              <code>.btn.btn-colorName</code> classes.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <a\n                  className=\"mr-1 mb-1 btn btn-primary\"\n                  color=\"primary\"\n                  href=\"https://pixinvent.com/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Link\n                </a>\n                <Button className=\"mr-1 mb-1\" color=\"primary\" tag=\"button\">\n                  Button\n                </Button>\n                <input\n                  className=\"mr-1 mb-1 btn btn-primary\"\n                  type=\"button\"\n                  value=\"Input\"\n                />\n                <input\n                  className=\"mr-1 mb-1 btn btn-primary\"\n                  type=\"submit\"\n                  value=\"Submit\"\n                />\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {buttonTags}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonTags\n","import React from \"react\"\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardTitle,\n  TabContent,\n  TabPane,\n  Nav,\n  NavItem,\n  NavLink,\n  ButtonGroup,\n  Row,\n  Col\n} from \"reactstrap\"\nimport classnames from \"classnames\"\nimport { Eye, Code } from \"react-feather\"\nimport { buttonGroupVertical } from \"./ButtonsSourceCode\"\n\nclass ButtonGroupsVertical extends React.Component {\n  state = {\n    activeTab: \"1\"\n  }\n\n  toggleTab = tab => {\n    if (this.state.activeTab !== tab) {\n      this.setState({ activeTab: tab })\n    }\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Card>\n          <CardHeader>\n            <CardTitle>Vertical Variation</CardTitle>\n            <div className=\"views\">\n              <Nav tabs>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"1\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"1\")\n                    }}\n                  >\n                    <Eye size={15} />\n                  </NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink\n                    className={classnames({\n                      active: this.state.activeTab === \"2\"\n                    })}\n                    onClick={() => {\n                      this.toggleTab(\"2\")\n                    }}\n                  >\n                    <Code size={15} />\n                  </NavLink>\n                </NavItem>\n              </Nav>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <p>\n              Use <code>vertical</code> attribute with <code>ButtonGroup</code>{\" \"}\n              tag to create a vertical button group.\n            </p>\n            <TabContent activeTab={this.state.activeTab}>\n              <TabPane tabId=\"1\">\n                <Row>\n                  <Col md={4} sm={12}>\n                    <ButtonGroup vertical className=\"mb-1\">\n                      <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n                    </ButtonGroup>\n                  </Col>\n                  <Col md={4} sm={12}>\n                    <ButtonGroup vertical className=\"mb-1\">\n                      <Button.Ripple color=\"primary\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"success\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"info\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"warning\">Button</Button.Ripple>{\" \"}\n                      <Button.Ripple color=\"danger\">Button</Button.Ripple>{\" \"}\n                    </ButtonGroup>\n                  </Col>\n                  <Col md={4} sm={12}>\n                    <ButtonGroup vertical className=\"mb-1\">\n                      <Button.Ripple outline color=\"primary\">\n                        Button\n                      </Button.Ripple>{\" \"}\n                      <Button.Ripple outline color=\"success\">\n                        Button\n                      </Button.Ripple>{\" \"}\n                      <Button.Ripple outline color=\"info\">\n                        Button\n                      </Button.Ripple>{\" \"}\n                      <Button.Ripple outline color=\"warning\">\n                        Button\n                      </Button.Ripple>{\" \"}\n                      <Button.Ripple outline color=\"danger\">\n                        Button\n                      </Button.Ripple>{\" \"}\n                    </ButtonGroup>\n                  </Col>\n                </Row>\n              </TabPane>\n              <TabPane className=\"component-code\" tabId=\"2\">\n                {buttonGroupVertical}\n              </TabPane>\n            </TabContent>\n          </CardBody>\n        </Card>\n      </React.Fragment>\n    )\n  }\n}\nexport default ButtonGroupsVertical\n","import React from \"react\"\nimport FilledButtons from \"./ButtonsFilled\"\nimport OutlineButtons from \"./ButtonsOutline\"\nimport FlatButtons from \"./ButtonsFlat\"\nimport GradientButtons from \"./ButtonsGradient\"\nimport ReliefButtons from \"./ButtonsRelief\"\nimport SquareButtons from \"./ButtonsSquare\"\nimport RoundButtons from \"./ButtonsRound\"\nimport TextColorButtons from \"./ButtonsTextColor\"\nimport IconButtons from \"./ButtonsIcon\"\nimport IconOnlyButtons from \"./ButtonsIconOnly\"\nimport ButtonGroups from \"./ButtonGroup\"\nimport ButtonSizes from \"./ButtonSizes\"\nimport ButtonBlock from \"./ButtonBlock\"\nimport ButtonTags from \"./ButtonTags\"\nimport ButtonGroupVertical from \"./ButtonGroupVertical\"\nimport BreadCrumbs from \"../../@vuexy/breadCrumbs/BreadCrumb\"\nimport Prism from \"prismjs\"\nimport \"prismjs/components/prism-jsx.min\"\nclass Buttons extends React.Component {\n  componentDidMount() {\n    Prism.highlightAll()\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <BreadCrumbs\n          breadCrumbTitle=\"Buttons\"\n          breadCrumbParent=\"Components\"\n          breadCrumbActive=\"Buttons\"\n        />\n        <FilledButtons />\n        <OutlineButtons />\n        <FlatButtons />\n        <GradientButtons />\n        <ReliefButtons />\n        <SquareButtons />\n        <RoundButtons />\n        <TextColorButtons />\n        <IconButtons />\n        <IconOnlyButtons />\n        <ButtonGroups />\n        <ButtonSizes />\n        <ButtonBlock />\n        <ButtonTags />\n        <ButtonGroupVertical />\n      </React.Fragment>\n    )\n  }\n}\nexport default Buttons\n","import React from 'react';\n/**\n * TabContext\n * {\n *  activeTabId: PropTypes.any\n * }\n */\n\nexport var TabContext = /*#__PURE__*/React.createContext({});","!function(i){var t=i.util.clone(i.languages.javascript),e=\"(?:\\\\{<S>*\\\\.{3}(?:[^{}]|<BRACES>)*\\\\})\";function n(t,n){return t=t.replace(/<S>/g,function(){return\"(?:\\\\s|//.*(?!.)|/\\\\*(?:[^*]|\\\\*(?!/))\\\\*/)\"}).replace(/<BRACES>/g,function(){return\"(?:\\\\{(?:\\\\{(?:\\\\{[^{}]*\\\\}|[^{}])*\\\\}|[^{}])*\\\\})\"}).replace(/<SPREAD>/g,function(){return e}),RegExp(t,n)}e=n(e).source,i.languages.jsx=i.languages.extend(\"markup\",t),i.languages.jsx.tag.pattern=n(\"</?(?:[\\\\w.:-]+(?:<S>+(?:[\\\\w.:$-]+(?:=(?:\\\"(?:\\\\\\\\[^]|[^\\\\\\\\\\\"])*\\\"|'(?:\\\\\\\\[^]|[^\\\\\\\\'])*'|[^\\\\s{'\\\"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>\"),i.languages.jsx.tag.inside.tag.pattern=/^<\\/?[^\\s>\\/]*/i,i.languages.jsx.tag.inside[\"attr-value\"].pattern=/=(?!\\{)(?:\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|'(?:\\\\[\\s\\S]|[^\\\\'])*'|[^\\s'\">]+)/i,i.languages.jsx.tag.inside.tag.inside[\"class-name\"]=/^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/,i.languages.jsx.tag.inside.comment=t.comment,i.languages.insertBefore(\"inside\",\"attr-name\",{spread:{pattern:n(\"<SPREAD>\"),inside:i.languages.jsx}},i.languages.jsx.tag),i.languages.insertBefore(\"inside\",\"special-attr\",{script:{pattern:n(\"=<BRACES>\"),inside:{\"script-punctuation\":{pattern:/^=(?=\\{)/,alias:\"punctuation\"},rest:i.languages.jsx},alias:\"language-javascript\"}},i.languages.jsx.tag);var o=function(t){return t?\"string\"==typeof t?t:\"string\"==typeof t.content?t.content:t.content.map(o).join(\"\"):\"\"},r=function(t){for(var n=[],e=0;e<t.length;e++){var a=t[e],s=!1;if(\"string\"!=typeof a&&(\"tag\"===a.type&&a.content[0]&&\"tag\"===a.content[0].type?\"</\"===a.content[0].content[0].content?0<n.length&&n[n.length-1].tagName===o(a.content[0].content[1])&&n.pop():\"/>\"===a.content[a.content.length-1].content||n.push({tagName:o(a.content[0].content[1]),openedBraces:0}):0<n.length&&\"punctuation\"===a.type&&\"{\"===a.content?n[n.length-1].openedBraces++:0<n.length&&0<n[n.length-1].openedBraces&&\"punctuation\"===a.type&&\"}\"===a.content?n[n.length-1].openedBraces--:s=!0),(s||\"string\"==typeof a)&&0<n.length&&0===n[n.length-1].openedBraces){var g=o(a);e<t.length-1&&(\"string\"==typeof t[e+1]||\"plain-text\"===t[e+1].type)&&(g+=o(t[e+1]),t.splice(e+1,1)),0<e&&(\"string\"==typeof t[e-1]||\"plain-text\"===t[e-1].type)&&(g=o(t[e-1])+g,t.splice(e-1,1),e--),t[e]=new i.Token(\"plain-text\",g,null,g)}a.content&&\"string\"!=typeof a.content&&r(a.content)}};i.hooks.add(\"after-tokenize\",function(t){\"jsx\"!==t.language&&\"tsx\"!==t.language||r(t.tokens)})}(Prism);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"tabs\", \"pills\", \"vertical\", \"horizontal\", \"justified\", \"fill\", \"navbar\", \"card\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tabs: PropTypes.bool,\n  pills: PropTypes.bool,\n  vertical: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  horizontal: PropTypes.string,\n  justified: PropTypes.bool,\n  fill: PropTypes.bool,\n  navbar: PropTypes.bool,\n  card: PropTypes.bool,\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'ul',\n  vertical: false\n};\n\nvar getVerticalClass = function getVerticalClass(vertical) {\n  if (vertical === false) {\n    return false;\n  } else if (vertical === true || vertical === 'xs') {\n    return 'flex-column';\n  }\n\n  return \"flex-\" + vertical + \"-column\";\n};\n\nvar Nav = function Nav(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      tabs = props.tabs,\n      pills = props.pills,\n      vertical = props.vertical,\n      horizontal = props.horizontal,\n      justified = props.justified,\n      fill = props.fill,\n      navbar = props.navbar,\n      card = props.card,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var classes = mapToCssModules(classNames(className, navbar ? 'navbar-nav' : 'nav', horizontal ? \"justify-content-\" + horizontal : false, getVerticalClass(vertical), {\n    'nav-tabs': tabs,\n    'card-header-tabs': card && tabs,\n    'nav-pills': pills,\n    'card-header-pills': card && pills,\n    'nav-justified': justified,\n    'nav-fill': fill\n  }), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nNav.propTypes = propTypes;\nNav.defaultProps = defaultProps;\nexport default Nav;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabContext } from './TabContext';\nimport { mapToCssModules, omit, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  activeTab: PropTypes.any,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar TabContent = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(TabContent, _Component);\n\n  TabContent.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.activeTab !== nextProps.activeTab) {\n      return {\n        activeTab: nextProps.activeTab\n      };\n    }\n\n    return null;\n  };\n\n  function TabContent(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      activeTab: _this.props.activeTab\n    };\n    return _this;\n  }\n\n  var _proto = TabContent.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        Tag = _this$props.tag;\n    var attributes = omit(this.props, Object.keys(propTypes));\n    var classes = mapToCssModules(classNames('tab-content', className), cssModule);\n    return /*#__PURE__*/React.createElement(TabContext.Provider, {\n      value: {\n        activeTabId: this.state.activeTab\n      }\n    }, /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    })));\n  };\n\n  return TabContent;\n}(Component);\n\nexport default TabContent;\nTabContent.propTypes = propTypes;\nTabContent.defaultProps = defaultProps;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"tabId\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabContext } from './TabContext';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  tabId: PropTypes.any\n};\nvar defaultProps = {\n  tag: 'div'\n};\nexport default function TabPane(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      tabId = props.tabId,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var getClasses = function getClasses(activeTabId) {\n    return mapToCssModules(classNames('tab-pane', className, {\n      active: tabId === activeTabId\n    }), cssModule);\n  };\n\n  return /*#__PURE__*/React.createElement(TabContext.Consumer, null, function (_ref) {\n    var activeTabId = _ref.activeTabId;\n    return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n      className: getClasses(activeTabId)\n    }));\n  });\n}\nTabPane.propTypes = propTypes;\nTabPane.defaultProps = defaultProps;"],"sourceRoot":""}